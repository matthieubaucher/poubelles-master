conda install python=3.7.0
conda install tensorflow==1.13.1
conda install tensorflow-gpu==1.13.1
conda install keras==2.3.1
conda install spyder==5.0.0
pip install scikit-image==0.18.1 (=conda install skimage)
pip install imutils==0.5.4
pip install opencv-python==4.5.1.48 (=conda install cv2)

model.py => changer tf.random_shuffle par tf.random.shuffle
utils.py => changer tf.log par tf.math.log
utils.py => changer model.metrics_tensors.append par model.metrics.append
callbacks.py =>
 		 # TensorBoard callback involves writing a summary file in a
	    # possibly distributed settings.
	    self._log_write_dir = distributed_file_utils.write_dirpath(
	        self.log_dir, self.model._get_distribution_strategy())  # pylint: disable=protected-access

        1)=>

        # In case this callback is used via native Keras, _get_distribution_strategy does not exist.
	    if hasattr(self.model, '_get_distribution_strategy'):
	      # TensorBoard callback involves writing a summary file in a
	      # possibly distributed settings.
	      self._log_write_dir = distributed_file_utils.write_dirpath(
	          self.log_dir, self.model._get_distribution_strategy())  # pylint: disable=protected-access
	    else:
	      self._log_write_dir = self.log_dir

	      # Safely remove the unneeded temp files.
		    distributed_file_utils.remove_temp_dirpath(
		        self.log_dir, self.model._get_distribution_strategy())  # pylint: disable=protected-access
        2)=>
        # In case this callback is used via native Keras, _get_distribution_strategy does not exist.
	    if hasattr(self.model, '_get_distribution_strategy'):
	      # Safely remove the unneeded temp files.
	      distributed_file_utils.remove_temp_dirpath(
	          self.log_dir, self.model._get_distribution_strategy())  # pylint: disable=protected-access
